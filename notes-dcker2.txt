1. realizar clone do repositorio https://github.com/gu1lh3rm3s0rd1/events-laravel.git
acessa a raiz do projeto: 
	o primeiro passo é copiar o arquivo .env.example para .env pois o Laravel usa o arquivo .env para carregar as variáveis de ambiente, e o arquivo .env.example é um exemplo de como o arquivo .env deve ser configurado.
	cp .env.example .env

em seguida ja vamos criar os containers, vamos usar builds prontas para esse projeto. mas antes vamos preparar nosso ambiente:
	crie um arquivo chamado default.conf no seguinte caminho ./docker/nginx/default.conf e adicionar o seguinte conteúdo:
	Neste arquivo, estou configurando o servidor Nginx para ouvir na porta 80, e estou configurando o root do servidor para a pasta /var/www/public que é a pasta onde o Laravel armazena os arquivos públicos, e estou configurando o servidor para redirecionar todas as requisições para o arquivo index.php
	//codigo nginx/deafult.conf

vamos criar um arquivo chamado docker-compose.yml na raiz do projeto:
//codigo docker-compose
neste arquvos estamos configurando 3servicos, o da aplicacao que chamei de app, o de nginx que chamei de web, para servir e redirecionar as requisicoes web para a aplicacao, e o ultimo o do banco de dados que chamei de db, para armazenar dados e consumi-los posterioremnte.

antes de executarmos o arquivo atente-se de alterar as configuraçoes de conexao do banco de dados no arquivo .env: 
# docker-container
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=hdc_events
DB_USERNAME=dockeruser
DB_PASSWORD=dockersenha

por fim inicie os containers:
	docker-compose up -d --build

em seguida acesse o container do app-laravel:
 winpty docker exec -it (container id ou name) bash (se estiver usando um terminal git)
 docker exec -it (container id ou name) bash ou docker exec -it (container id ou name) sh

Em alguns casos, o shell padrão do container pode ser o sh em vez do bash. Se você estiver enfrentando problemas ao usar o comando “bash”, tente usar o comando “sh” para acessar o shell do container.

por fim, execute:
composer install //instala as dependencias do composer para servir a aplicacao
npm install //instala as dependencias do node

chown -R www-data:www-data storage //passa as propriedades de storage para o nginx

php artisan key:generate //cria a chave criptografada de acesso para a aplicacao
php artisan migrate //migra as tabelas para o banco de dados

seguindo esses passos conseguimos subir nossa aplicacao laravel com contianer, entao se acessarmos localhost:80 veremos nossa aplicacao rodando.

caso enfrente algum erro tente rodar: 
composer require laravel/jetstream
php artisan jetstream:install livewire

posteriormente a isso acesse a model de usuarios em app/Models/User.php e no fim do arquivo insira: 
    public function events()
    {
        return $this->hasMany(Event::class);
    }

    public function eventsAsParticipant()
    {
        return $this->belongsToMany(Event::class, 'event_user', 'user_id', 'event_id');
    }

se acaso ainda estiver enfrentando problemas no seu ambiente tente limpar o cache e recriar os containers

docker system prune -a    --- rebuild context e clean cache docker

e pronot, agora voce tem um ambiente laravel rodando em containers docker com php e nginx.


